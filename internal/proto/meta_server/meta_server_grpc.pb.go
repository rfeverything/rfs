// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: meta_server.proto

package meta_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaServerClient is the client API for MetaServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServerClient interface {
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	AppendFile(ctx context.Context, in *AppendFileRequest, opts ...grpc.CallOption) (*AppendFileResponse, error)
	GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*GetFileStatResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	RenameDir(ctx context.Context, in *RenameDirRequest, opts ...grpc.CallOption) (*RenameDirResponse, error)
	MoveDir(ctx context.Context, in *MoveDirRequest, opts ...grpc.CallOption) (*MoveDirResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type metaServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServerClient(cc grpc.ClientConnInterface) MetaServerClient {
	return &metaServerClient{cc}
}

func (c *metaServerClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) AppendFile(ctx context.Context, in *AppendFileRequest, opts ...grpc.CallOption) (*AppendFileResponse, error) {
	out := new(AppendFileResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/AppendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*GetFileStatResponse, error) {
	out := new(GetFileStatResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/GetFileStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	out := new(RenameFileResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error) {
	out := new(DeleteDirResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/DeleteDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) RenameDir(ctx context.Context, in *RenameDirRequest, opts ...grpc.CallOption) (*RenameDirResponse, error) {
	out := new(RenameDirResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/RenameDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) MoveDir(ctx context.Context, in *MoveDirRequest, opts ...grpc.CallOption) (*MoveDirResponse, error) {
	out := new(MoveDirResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/MoveDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/meta_server.MetaServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServerServer is the server API for MetaServer service.
// All implementations must embed UnimplementedMetaServerServer
// for forward compatibility
type MetaServerServer interface {
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	AppendFile(context.Context, *AppendFileRequest) (*AppendFileResponse, error)
	GetFileStat(context.Context, *GetFileStatRequest) (*GetFileStatResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	RenameDir(context.Context, *RenameDirRequest) (*RenameDirResponse, error)
	MoveDir(context.Context, *MoveDirRequest) (*MoveDirResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedMetaServerServer()
}

// UnimplementedMetaServerServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServerServer struct {
}

func (UnimplementedMetaServerServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedMetaServerServer) AppendFile(context.Context, *AppendFileRequest) (*AppendFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendFile not implemented")
}
func (UnimplementedMetaServerServer) GetFileStat(context.Context, *GetFileStatRequest) (*GetFileStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileStat not implemented")
}
func (UnimplementedMetaServerServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedMetaServerServer) RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedMetaServerServer) Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedMetaServerServer) DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedMetaServerServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetaServerServer) RenameDir(context.Context, *RenameDirRequest) (*RenameDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDir not implemented")
}
func (UnimplementedMetaServerServer) MoveDir(context.Context, *MoveDirRequest) (*MoveDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDir not implemented")
}
func (UnimplementedMetaServerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMetaServerServer) mustEmbedUnimplementedMetaServerServer() {}

// UnsafeMetaServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServerServer will
// result in compilation errors.
type UnsafeMetaServerServer interface {
	mustEmbedUnimplementedMetaServerServer()
}

func RegisterMetaServerServer(s grpc.ServiceRegistrar, srv MetaServerServer) {
	s.RegisterService(&MetaServer_ServiceDesc, srv)
}

func _MetaServer_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_AppendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).AppendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/AppendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).AppendFile(ctx, req.(*AppendFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_GetFileStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).GetFileStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/GetFileStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).GetFileStat(ctx, req.(*GetFileStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/DeleteDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).DeleteDir(ctx, req.(*DeleteDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_RenameDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).RenameDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/RenameDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).RenameDir(ctx, req.(*RenameDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_MoveDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).MoveDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/MoveDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).MoveDir(ctx, req.(*MoveDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta_server.MetaServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaServer_ServiceDesc is the grpc.ServiceDesc for MetaServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta_server.MetaServer",
	HandlerType: (*MetaServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _MetaServer_CreateFile_Handler,
		},
		{
			MethodName: "AppendFile",
			Handler:    _MetaServer_AppendFile_Handler,
		},
		{
			MethodName: "GetFileStat",
			Handler:    _MetaServer_GetFileStat_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _MetaServer_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _MetaServer_RenameFile_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _MetaServer_Mkdir_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _MetaServer_DeleteDir_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MetaServer_List_Handler,
		},
		{
			MethodName: "RenameDir",
			Handler:    _MetaServer_RenameDir_Handler,
		},
		{
			MethodName: "MoveDir",
			Handler:    _MetaServer_MoveDir_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MetaServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta_server.proto",
}
