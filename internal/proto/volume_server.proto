syntax = "proto3";

package volume_server_proto;
option go_package = "github.com/rfeverything/rfs/internal/proto/volume_server_proto";

import "rfs.proto";

service VolumeServer{
    rpc PutChunk(PutChunkRequest) returns (PutChunkResponse) {};
    rpc GetChunk(GetChunkRequest) returns (GetChunkResponse) {};
    rpc DeleteChunk(DeleteChunkRequest) returns (DeleteChunkResponse) {};

    // rpc MoveChunkToOtherVolume(MoveChunkToOtherVolumeRequest) returns (MoveChunkToOtherVolumeResponse) {};

    rpc VolumeStatus(VolumeStatusRequest) returns (VolumeStatusResponse) {};

    rpc Ping(PingRequest) returns (PingResponse) {};
}

message PutChunkRequest{
    repeated rfs.FileChunk chunks = 1;
}

message PutChunkResponse{
    string error = 1;
}

message GetChunkRequest{
    string volume_id = 1;
    int64 chunk_id = 2;
    uint64 offset = 3;
}

message GetChunkResponse{
    string error = 1;
    rfs.FileChunk chunk = 2;
}

message DeleteChunkRequest{
    string volume_id = 1;
    int64 chunk_id = 2;
}

message DeleteChunkResponse{
    string error = 1;
}

message VolumeStatus{
    string volume_id = 1;
    string address = 2;
    uint64 size = 3;
    uint64 used = 4;
    uint64 free = 5;
    uint64 chunk_count = 6;
}

message VolumeStatusRequest{
}

message VolumeStatusResponse{
    VolumeStatus volume_status = 1;
}

message PingRequest {
    string target = 1;
    string target_type = 2;
}
message PingResponse {
    int64 start_time_ns = 1;
    int64 remote_time_ns = 2;
    int64 stop_time_ns = 3;
}
