syntax = "proto3";

package meta_server;
option go_package = "github.com/rfeverything/rfs/internal/proto/meta_server";

import "rfs.proto";

service MetaServer{
    rpc CreateFile(CreateFileRequest) returns (CreateFileResponse);
    rpc AppendFile(AppendFileRequest) returns (AppendFileResponse);
    rpc GetFile(GetFileRequest) returns (GetFileResponse);
    rpc Stat(StatRequest) returns (StatResponse);

    rpc Remove(RemoveRequest) returns (RemoveResponse);

    rpc Move(MoveRequest) returns (MoveResponse);

    rpc Mkdir(MkdirRequest) returns (MkdirResponse);
    rpc List(ListRequest) returns (ListResponse);

    // rpc AssignVolume(AssignVolumeRequest) returns (AssignVolumeResponse);
    // rpc RegisterVolumeServer(RegisterVolumeServerRequest) returns (RegisterVolumeServerResponse);

    rpc Ping(PingRequest) returns (PingResponse) {};
}

message CreateFileRequest{
    string clientId = 1;
    string path = 2;
    bool o_excl = 3;
    bool skip_check_parent_directory = 4;

    rfs.Entry entry = 5;
}

message CreateFileResponse{
    string error = 1;
}

message AppendFileRequest{
    string clientId = 1;
    string path = 2;
    repeated rfs.Entry entry = 3;
}

message AppendFileResponse{
    string error = 1;
}

message GetFileRequest{
    string clientId = 1;
    string path = 2;
}

message GetFileResponse{
    string error = 1;
    rfs.Entry entry = 2;
}

message StatRequest{
    string clientId = 1;
    string path = 2;
}

message StatResponse{
    string error = 1;
    rfs.Entry entry = 2;
}

message MkdirRequest{
    string clientId = 1;
    string directory = 3;
}

message MkdirResponse{
    string error = 1;
}

message RemoveRequest{
    string clientId = 1;
    string path = 3;
    bool recursive = 4;
}

message RemoveResponse{
    string error = 1;
}

message ListRequest{
    string clientId = 1;
    string directory = 3;
}

message ListResponse{
    string error = 1;
    repeated rfs.Entry entries = 2;
}

message MoveRequest{
    string clientId = 1;
    string src_path = 2;
    string dst_path = 3;
}

message MoveResponse{
    string error = 1;
}

message PingRequest {
    string target = 1;
    string target_type = 2;
}
message PingResponse {
    int64 start_time_ns = 1;
    int64 remote_time_ns = 2;
    int64 stop_time_ns = 3;
}
